#pragma once

#include <string.h>

typedef enum HTTPHeaderKey {
    EMPTY_HEADER_KEY,
    ACCEPT,
    ACCEPT_CHARSET,
    ACCEPT_ENCODING,
    ACCEPT_LANGUAGE,
    ACCEPT_RANGES,
    AGE,
    ALLOW,
    AUTHORIZATION,
    CACHE_CONTROL,
    CONNECTION,
    CONTENT_ENCODING,
    CONTENT_DISPOSITION,
    CONTENT_LANGUAGE,
    CONTENT_LENGTH,
    CONTENT_LOCATION,
    CONTENT_RANGE,
    CONTENT_TYPE,
    COOKIE,
    DATE,
    ETAG,
    EXPECT,
    EXPIRES,
    FROM,
    HOST,
    IF_MATCH,
    IF_MODIFIED_SINCE,
    IF_NONE_MATCH,
    IF_RANGE,
    IF_UNMODIFIED_SINCE,
    LAST_MODIFIED,
    LINK,
    LOCATION,
    MAX_FORWARDS,
    ORIGIN,
    PRAGMA,
    PROXY_AUTHENTICATE,
    PROXY_AUTHORIZATION,
    RANGE,
    REFERER,
    RETRY_AFTER,
    SERVER,
    SET_COOKIE,
    SET_COOKIE2,
    TE,
    TRAILER,
    TRANSFER_ENCODING,
    UPGRADE,
    USER_AGENT,
    VARY,
    VIA,
    WARNING,
    WWW_AUTHENTICATE,
} HTTPHeaderKey;

static const char * const HEADER_KEY_LIST[] = {
        [EMPTY_HEADER_KEY] = "",
        [ACCEPT] = "Accept",
        [ACCEPT_CHARSET] = "Accept-Encoding",
        [ACCEPT_ENCODING] = "Accept-Charset",
        [ACCEPT_LANGUAGE] = "Accept-Language",
        [ACCEPT_RANGES] = "Accept-Ranges",
        [AGE] = "Age",
        [ALLOW] = "Allow",
        [AUTHORIZATION] = "Authorization",
        [CACHE_CONTROL] = "Cache-Control",
        [CONNECTION] = "Connection",
        [CONTENT_ENCODING] = "Content-Encoding",
        [CONTENT_DISPOSITION] = "Content-Disposition",
        [CONTENT_LANGUAGE] = "Content-Language",
        [CONTENT_LENGTH] = "Content-Length",
        [CONTENT_LOCATION] = "Content-Location",
        [CONTENT_RANGE] = "Content-Range",
        [CONTENT_TYPE] = "Content-Type",
        [COOKIE] = "Cookie",
        [DATE] = "Date",
        [ETAG] = "ETag",
        [EXPECT] = "Expect",
        [EXPIRES] = "Expires",
        [FROM] = "From",
        [HOST] = "Host",
        [IF_MATCH] = "If-Match",
        [IF_MODIFIED_SINCE] = "If-Modified-Since",
        [IF_NONE_MATCH] = "If-None-Match",
        [IF_RANGE] = "If-Range",
        [IF_UNMODIFIED_SINCE] = "If-Unmodified-Since",
        [LAST_MODIFIED] = "Last-Modified",
        [LINK] = "Link",
        [LOCATION] = "Location",
        [MAX_FORWARDS] = "Max-Forwards",
        [ORIGIN] = "Origin",
        [PRAGMA] = "Pragma",
        [PROXY_AUTHENTICATE] = "Proxy-Authenticate",
        [PROXY_AUTHORIZATION] = "Proxy-Authorization",
        [RANGE] = "Range",
        [REFERER] = "Referer",
        [RETRY_AFTER] = "Retry-After",
        [SERVER] = "Server",
        [SET_COOKIE] = "Set-Cookie",
        [SET_COOKIE2] = "Set-Cookie2",
        [TE] = "TE",
        [TRAILER] = "Trailer",
        [TRANSFER_ENCODING] = "Transfer-Encoding",
        [UPGRADE] = "Upgrade",
        [USER_AGENT] = "User-Agent",
        [VARY] = "Vary",
        [VIA] = "Via",
        [WARNING] = "Warning",
        [WWW_AUTHENTICATE] = "WWW-Authenticate",
};

static inline const char *getHeaderValueByKey(HTTPHeaderKey headerKey) {
    return HEADER_KEY_LIST[headerKey];
}

static HTTPHeaderKey getHttpHeaderKeyByValue(const char *headerName) {
    for (int i = 0; i < sizeof(HEADER_KEY_LIST) / sizeof(char *); i++) {
        if (!strcmp(HEADER_KEY_LIST[i], headerName)) {
            return i;
        }
    }
    return EMPTY_HEADER_KEY;
}